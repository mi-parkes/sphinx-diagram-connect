{"created": "2025-06-19T19:53:49.302748", "current_version": "1.2", "project": "sphinx-diagram-connect", "versions": {"1.2": {"created": "2025-06-19T19:53:49.302737", "creator": {"program": "sphinx_needs", "version": "5.1.0"}, "needs": {"ftr_demo_00001": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "This feature enables Sphinx documentation to automatically resolve and update\ncross-references (e.g., `:ref:`, `:doc:`) and Sphinx-Needs references within\nSVG diagrams. This allows users to create interactive, clickable diagrams that\nlink directly to other parts of their documentation.", "created_at": "", "docname": "traceability/features", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "ftr_demo_00001", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 12, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": ["ftr_demo_00002", "ftr_demo_00003"], "refinement_back": [], "satisfy": [], "satisfy_back": ["req_demo_00001", "req_demo_00004", "req_demo_00005", "req_demo_00006", "req_demo_00007", "req_demo_00008"], "section_name": "Features", "sections": ["Features"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Connect Sphinx References in SVGs", "type": "ftr", "type_ext": "", "type_name": "Feature", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "ftr_demo_00002": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall identify and resolve standard Sphinx cross-references\n(`:ref:`, `:doc:`) found within `xlink:href` attributes of SVG elements.\nResolved references will be replaced with their absolute or relative URIs.", "created_at": "", "docname": "traceability/features", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "ftr_demo_00002", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 22, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": ["usc_demo_00001"], "reasoning": "", "refinement": [], "refinement_back": ["ftr_demo_00001"], "satisfy": [], "satisfy_back": ["req_demo_00002"], "section_name": "Features", "sections": ["Features"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Support Standard Sphinx References", "type": "ftr", "type_ext": "", "type_name": "Feature", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "ftr_demo_00003": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall identify and resolve Sphinx-Needs references (`:need:`)\nfound within `xlink:href` attributes of SVG elements, provided the\n`needs_build_json` configuration is enabled.", "created_at": "", "docname": "traceability/features", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "ftr_demo_00003", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 30, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": ["usc_demo_00002"], "reasoning": "", "refinement": ["ftr_demo_00004"], "refinement_back": ["ftr_demo_00001"], "satisfy": [], "satisfy_back": ["req_demo_00003"], "section_name": "Features", "sections": ["Features"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Support Sphinx-Needs References", "type": "ftr", "type_ext": "", "type_name": "Feature", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "ftr_demo_00004": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The extension shall provide a configuration option (`sphinx_diagram_connect_verbose`)\nto enable or disable verbose logging of reference resolution operations during\nthe Sphinx build process. This helps in debugging and understanding the\nextension's behavior.", "created_at": "", "docname": "traceability/features", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "ftr_demo_00004", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 39, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": ["usc_demo_00003"], "reasoning": "", "refinement": [], "refinement_back": ["ftr_demo_00003"], "satisfy": [], "satisfy_back": ["req_demo_00009", "req_demo_00010"], "section_name": "Features", "sections": ["Features"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Configurable Verbose Logging", "type": "ftr", "type_ext": "", "type_name": "Feature", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "ftr_demo_00005": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The extension shall log a warning for any Sphinx or Sphinx-Needs references\nwithin SVG files that could not be resolved to a valid URI, without\nhalting the build process.", "created_at": "", "docname": "traceability/features", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "ftr_demo_00005", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 48, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": ["req_demo_00009"], "section_name": "Features", "sections": ["Features"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Handle Unresolved References Gracefully", "type": "ftr", "type_ext": "", "type_name": "Feature", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00001": {"acceptance": "The extension successfully identifies `xlink:href` attributes containing Sphinx reference patterns in SVG files.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall parse SVG files to accurately identify all `<a>` elements and extract the values of their `xlink:href` attributes.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": ["usc_demo_00001"], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00001", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 15, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Core capability for link resolution.", "refinement": ["req_demo_00002", "req_demo_00003"], "refinement_back": [], "satisfy": ["ftr_demo_00001"], "satisfy_back": ["spc_demo_00001"], "section_name": "Functional Requirements", "sections": ["Functional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00001", "title": "SVG Link Identification", "type": "req", "type_ext": "Functional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00002": {"acceptance": "Resolved Sphinx references generate valid URIs.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall resolve standard Sphinx cross-references (e.g., `:ref:`target``, `:doc:`target``) found in `xlink:href` attributes to their corresponding relative or absolute HTML URIs within the Sphinx build output.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00002", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 27, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Direct support for core Sphinx linking.", "refinement": [], "refinement_back": ["req_demo_00001"], "satisfy": ["ftr_demo_00002"], "satisfy_back": ["spc_demo_00002"], "section_name": "Functional Requirements", "sections": ["Functional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00001", "title": "Standard Sphinx Reference Resolution", "type": "req", "type_ext": "Functional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00003": {"acceptance": "Resolved Sphinx-Needs references generate valid URIs.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall resolve Sphinx-Needs references (e.g., `:need:`MY_NEED_ID``) found in `xlink:href` attributes to their corresponding HTML URIs based on the `needs.json` output, if `needs_build_json` is enabled.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": ["usc_demo_00002"], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00003", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 38, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Integration with Sphinx-Needs for traceability.", "refinement": [], "refinement_back": ["req_demo_00001"], "satisfy": ["ftr_demo_00003"], "satisfy_back": ["spc_demo_00003"], "section_name": "Functional Requirements", "sections": ["Functional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00003", "title": "Sphinx-Needs Reference Resolution", "type": "req", "type_ext": "Functional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00004": {"acceptance": "Modified SVG files contain the correct, updated `xlink:href` values.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall modify the `xlink:href` attributes within the SVG files by replacing the original Sphinx or Sphinx-Needs reference patterns with the resolved URIs.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00004", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 49, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Essential for making links clickable.", "refinement": [], "refinement_back": [], "satisfy": ["ftr_demo_00001"], "satisfy_back": ["spc_demo_00004"], "section_name": "Functional Requirements", "sections": ["Functional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00001, tsc_int_00003", "title": "SVG File Modification", "type": "req", "type_ext": "Functional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": ["tsc_demo_00002"], "verify_spc": [], "verify_spc_back": []}, "req_demo_00005": {"acceptance": "The written SVG files are well-formed and display correctly.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall write the modified SVG content back to the original file path, ensuring the output remains a valid and well-formed SVG.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00005", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 60, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Ensures valid SVG output.", "refinement": [], "refinement_back": [], "satisfy": ["ftr_demo_00001"], "satisfy_back": [], "section_name": "Functional Requirements", "sections": ["Functional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00001", "title": "SVG Output Preservation", "type": "req", "type_ext": "Functional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00006": {"acceptance": "The extension integrates without causing Sphinx build failures.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The extension shall seamlessly integrate into the standard Sphinx build process and execute its logic during the `build-finished` event without introducing errors that halt the build.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00006", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 82, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Ensures smooth integration into Sphinx.", "refinement": [], "refinement_back": [], "satisfy": ["ftr_demo_00001"], "satisfy_back": [], "section_name": "Nonfunctional Requirements", "sections": ["Nonfunctional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00001", "title": "Build Process Compatibility", "type": "req", "type_ext": "Nonfunctional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00007": {"acceptance": "Processing time for SVGs is minimal, not significantly impacting build times.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The SVG parsing and modification process shall be optimized to ensure minimal impact on the overall Sphinx build time, particularly for projects with a large number of SVG diagrams.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00007", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 93, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Important for large documentation sets.", "refinement": ["req_demo_00008"], "refinement_back": [], "satisfy": ["ftr_demo_00001"], "satisfy_back": [], "section_name": "Nonfunctional Requirements", "sections": ["Nonfunctional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Performance Efficiency", "type": "req", "type_ext": "Nonfunctional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00008": {"acceptance": "The extension handles 100+ SVG files without excessive memory or time consumption.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall efficiently handle the processing of a large number of SVG files (e.g., hundreds or thousands) within a single Sphinx build, without encountering memory exhaustion or excessively long processing times.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00008", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 105, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Ensures performance with many diagrams.", "refinement": [], "refinement_back": ["req_demo_00007"], "satisfy": ["ftr_demo_00001"], "satisfy_back": [], "section_name": "Nonfunctional Requirements", "sections": ["Nonfunctional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Scalability for Multiple SVGs", "type": "req", "type_ext": "Nonfunctional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00009": {"acceptance": "Log messages are clear and accurate.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall provide clear and informative log messages for successful reference resolutions and warnings for unresolved references, to aid users in understanding the extension's operations and troubleshooting.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00009", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 116, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "Aids debugging and user understanding.", "refinement": ["req_demo_00010"], "refinement_back": [], "satisfy": ["ftr_demo_00004", "ftr_demo_00005"], "satisfy_back": [], "section_name": "Nonfunctional Requirements", "sections": ["Nonfunctional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00002, tsc_int_00004", "title": "Informative Logging", "type": "req", "type_ext": "Nonfunctional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "req_demo_00010": {"acceptance": "Verbose logging can be toggled via `conf.py`.", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The system shall allow users to configure the verbosity level of the extension's logging output via a Sphinx configuration option in `conf.py`.", "created_at": "", "docname": "traceability/requirements", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": ["usc_demo_00003"], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "req_demo_00010", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 128, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "User control over logging detail.", "refinement": [], "refinement_back": ["req_demo_00009"], "satisfy": ["ftr_demo_00004"], "satisfy_back": ["spc_demo_00005"], "section_name": "Nonfunctional Requirements", "sections": ["Nonfunctional Requirements", "Requirements"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "implemented", "style": null, "tags": [], "template": null, "test": "tsc_int_00004", "title": "Configurable Verbosity Level", "type": "req", "type_ext": "Nonfunctional", "type_name": "Requirement", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": ["tsc_demo_00004"], "verify_spc": [], "verify_spc_back": []}, "spc_demo_00001": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The `DiagramConnect` class shall implement a method, `resolve_references`,\nwhich is triggered upon the `build-finished` Sphinx event. This method shall\niterate through all `.svg` files located in the `app.builder.outdir` and\n`app.builder.imagedir`. It shall identify and modify `xlink:href` attributes\nthat contain Sphinx cross-reference patterns (e.g., `:ref:`target`,\n`:doc:`target`) or Sphinx-Needs reference patterns (e.g., `:need:`target`).\nThe modification involves replacing these patterns with their resolved URIs.\n\n**Component Diagram:** :ref:`Extension Architecture`", "created_at": "", "docname": "traceability/specifications", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "spc_demo_00001", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 12, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": ["spc_demo_00002", "spc_demo_00003"], "refinement_back": [], "satisfy": ["req_demo_00001"], "satisfy_back": [], "section_name": "Specifications", "sections": ["Specifications"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "SVG Reference Resolution Mechanism", "type": "spc", "type_ext": "", "type_name": "Specification", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "spc_demo_00002": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The `_resolve_ref` internal method shall utilize `app.env.domains['std'].resolve_xref`\nto convert Sphinx reference targets (e.g., `my-section`, `my-document`) into\ntheir corresponding relative or absolute URIs. This process must handle\n`sphinx.errors.NoUri` by returning `None` if a reference cannot be resolved\nby Sphinx's standard mechanisms.", "created_at": "", "docname": "traceability/specifications", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "spc_demo_00002", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 28, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": ["spc_demo_00001"], "satisfy": ["req_demo_00002"], "satisfy_back": [], "section_name": "Specifications", "sections": ["Specifications"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Standard Sphinx Reference Resolution", "type": "spc", "type_ext": "", "type_name": "Specification", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": ["tsc_demo_00001"]}, "spc_demo_00003": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "If `app.config.needs_build_json` is set to `True`, the `resolve_references`\nmethod shall load `needs.json` using `sphinx_needs.needsfile.NeedsList`.\nFor `xlink:href` attributes matching a Sphinx-Needs reference pattern (e.g.,\n`:need:`ID`), the system shall look up the 'docname' associated with the\n'ID' in the loaded `needs.json` data. The `xlink:href` shall then be\nupdated to `../<docname>.html#<ID>`.", "created_at": "", "docname": "traceability/specifications", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "spc_demo_00003", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 39, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": ["spc_demo_00001"], "satisfy": ["req_demo_00003"], "satisfy_back": [], "section_name": "Specifications", "sections": ["Specifications"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Sphinx-Needs Reference Resolution", "type": "spc", "type_ext": "", "type_name": "Specification", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "spc_demo_00004": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The `resolve_references` method shall log a warning message using\n`sphinx.util.logging.getLogger(__name__).warning` when a Sphinx or\nSphinx-Needs reference pattern found in an `xlink:href` attribute cannot be\nsuccessfully resolved. The warning message shall include the unresolved\nreference and the filename where it occurred. The warning type shall be\n\"sphinx-diagram-connect-missing-reference\".", "created_at": "", "docname": "traceability/specifications", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "spc_demo_00004", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 51, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": ["req_demo_00004"], "satisfy_back": [], "section_name": "Specifications", "sections": ["Specifications"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Error Handling for Unresolved References", "type": "spc", "type_ext": "", "type_name": "Specification", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "spc_demo_00005": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The extension shall expose a configuration option,\n`sphinx_diagram_connect_verbose` (defaulting to `False`), which, when set\nto `True`, shall enable additional `logger.info` messages during the\n`resolve_references` process, specifically detailing the transformation\nof original `href` values to their resolved URIs.", "created_at": "", "docname": "traceability/specifications", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "spc_demo_00005", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 63, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": ["req_demo_00010"], "satisfy_back": [], "section_name": "Specifications", "sections": ["Specifications"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Verbose Logging Configuration", "type": "spc", "type_ext": "", "type_name": "Specification", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "tsc_demo_00001": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Purpose:** Verify that standard Sphinx references (`:ref:`, `:doc:`) within SVG `xlink:href` attributes are correctly resolved to their corresponding URIs when `resolve_references` is executed, primarily testing the specification for standard resolution.\n\n\n**Implementation:** :meth:`tests.integration.test_diagram_connect_integration.TestDiagramConnectIntegration.test_resolve_references_html_format_success`\n\n**Test Steps:**\n\n1. Set up a mock Sphinx environment with an output directory containing an SVG file.\n2. The SVG file should contain an `<a>` element with an `xlink:href` attribute value like `:ref:`my-ref``.\n3. Configure the mock Sphinx application to return a resolved URI (e.g., `/_static/resolved_my-ref.html`) for `:ref:`my-ref``.\n4. Call `diagram_connect_instance.resolve_references(mock_sphinx_app, None)`.\n5. Assert that `builtins.open` was called to read and write the SVG.\n6. Assert that `lxml.etree.fromstring` and `lxml.etree.tostring` were called.\n7. Assert that the `xlink:href` attribute in the mock SVG element was updated to the resolved URI.\n8. Assert that the Sphinx logger recorded an \"info\" message about updating the SVG file.\n\n**Expected Result:** The `xlink:href` attribute of the SVG element is updated with the correct resolved URI, and appropriate logging occurs.", "created_at": "", "docname": "traceability/tests", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "tsc_demo_00001", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 8, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Tests", "sections": ["Tests"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Test Standard Sphinx Reference Resolution Success", "type": "tsc", "type_ext": "", "type_name": "Test Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": ["spc_demo_00002"], "verify_spc_back": []}, "tsc_demo_00002": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Purpose:** Verify that `resolve_references` logs a warning for any standard Sphinx reference in an SVG that cannot be resolved, ensuring robust error handling.\n\n**Implementation:** :meth:`tests.integration.test_diagram_connect_integration.TestDiagramConnectIntegration.test_resolve_references_html_format_unresolved`\n\n**Test Steps:**\n\n1. Set up a mock Sphinx environment with an output directory containing an SVG file.\n2. The SVG file should contain an `<a>` element with an `xlink:href` attribute value like `:ref:`non-existent-ref``.\n3. Configure the mock Sphinx application to return `None` when attempting to resolve `:ref:`non-existent-ref``.\n4. Call `diagram_connect_instance.resolve_references(mock_sphinx_app, None)`.\n5. Assert that `builtins.open` was called to read the SVG.\n6. Assert that `lxml.etree.fromstring` was called.\n7. Assert that `lxml.etree.tostring` was *not* called (indicating no modification).\n8. Assert that the `xlink:href` attribute remains unchanged.\n9. Assert that the Sphinx logger recorded a \"warning\" message with the correct format and type for the unresolved reference.\n10. Assert that no \"info\" message about updating the SVG file was logged.\n\n**Expected Result:** The SVG file remains unchanged, and a warning is logged for the unresolved reference.", "created_at": "", "docname": "traceability/tests", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "tsc_demo_00002", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 31, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Tests", "sections": ["Tests"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Test Unresolved Standard Sphinx Reference Handling", "type": "tsc", "type_ext": "", "type_name": "Test Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": ["req_demo_00004"], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "tsc_demo_00003": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Purpose:** Verify that Sphinx-Needs references within SVG `xlink:href` attributes are correctly resolved when `needs_build_json` is enabled, validating the use case.\n\n**Implementation:** :meth:`tests.integration.test_diagram_connect_integration.TestDiagramConnectIntegration.test_resolve_references_with_needs_json_success`\n\n**Test Steps:**\n\n1. Set up a mock Sphinx environment with `needs_build_json` set to `True`.\n2. Mock `sphinx_needs.needsfile.NeedsList` to return a `needs.json` structure containing a known need (e.g., `MY_NEED_001` with `docname: \"specifications\"`).\n3. The SVG file should contain an `<a>` element with an `xlink:href` attribute value like `:ref:`MY_NEED_001``.\n4. Call `diagram_connect_instance.resolve_references(mock_sphinx_app, None)`.\n5. Assert that `NeedsList` was initialized and `load_json` was called.\n6. Assert that the `xlink:href` attribute in the mock SVG element was updated to `../specifications.html#MY_NEED_001`.\n7. Assert that `lxml.etree.tostring` was called and an \"info\" message about updating the SVG was logged.\n\n**Expected Result:** The `xlink:href` attribute is correctly updated with the Sphinx-Needs URI, and an info message is logged.", "created_at": "", "docname": "traceability/tests", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "tsc_demo_00003", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 55, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Tests", "sections": ["Tests"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Test Sphinx-Needs Reference Resolution Success", "type": "tsc", "type_ext": "", "type_name": "Test Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": ["usc_demo_00002"], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "tsc_demo_00004": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Purpose:** Verify that verbose logging messages are generated as specified when `sphinx_diagram_connect_verbose` is `True`, confirming the requirement for configurable verbosity.\n\n**Implementation:** :meth:`tests.integration.test_diagram_connect_integration.TestDiagramConnectIntegration.test_resolve_references_verbose_logging`\n\n**Test Steps:**\n\n1. Set up a mock Sphinx environment with `sphinx_diagram_connect_verbose` set to `True`.\n2. Provide a mock SVG with a resolvable Sphinx reference (e.g., `:ref:`my-ref``).\n3. Call `diagram_connect_instance.resolve_references(mock_sphinx_app, None)`.\n4. Assert that `mock_logger.info` was called with a message confirming the `href` resolution, including both the original and new URIs, and with `color=\"purple\"`.\n5. Assert that the standard \"Updating SVG file\" info message is also logged.\n\n**Expected Result:** Both the detailed `href` resolution log and the SVG update log messages are present.", "created_at": "", "docname": "traceability/tests", "doctype": ".rst", "duration": "", "elaboration": [], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "tsc_demo_00004", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 76, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": [], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Tests", "sections": ["Tests"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Test Verbose Logging Functionality", "type": "tsc", "type_ext": "", "type_name": "Test Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": ["req_demo_00010"], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "usc_demo_00001": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Main Flow:**\n\n1. The user builds Sphinx documentation that includes SVG diagrams.\n2. The extension iterates through SVG files in the output directory.\n3. For each SVG, the extension parses its content to find `xlink:href` attributes.\n4. If an `xlink:href` attribute contains a standard Sphinx reference pattern (e.g., `:ref:`my-target`), the extension attempts to resolve it.\n5. The resolved URI (e.g., `/path/to/my-target.html`) replaces the reference pattern in the `xlink:href` attribute.\n6. The modified SVG file is saved, making the link clickable in the generated HTML.\n\n**Preconditions:**\n\n* Sphinx documentation build is initiated.\n* SVG diagrams are present in the build output's image directory.\n* Sphinx cross-references used in SVGs are valid and resolvable within the Sphinx project.\n\n**Postconditions:**\n\n* SVG diagrams have clickable links where Sphinx references were present.\n* The Sphinx build completes successfully.\n\n**Use Case Diagram:**\n\n.. uml::\n\n   left to right direction\n   actor User\n   boundary \"Sphinx Build\" as Sphinx\n   control \"DiagramConnect\" as DC\n   entity \"SVG File\" as SVG\n   entity \"Sphinx Environment\" as SE\n\n   User --> Sphinx : Build Docs\n   Sphinx --> DC : Trigger resolve_references\n   DC --> SVG : Read SVG files\n   DC --> SE : Resolve :ref:/:doc:\n   SE --> DC : Return resolved URI\n   DC --> SVG : Write updated SVG\n   DC --> Sphinx : Build finished\n   Sphinx --> User : Provide HTML Docs", "created_at": "", "docname": "traceability/use_cases", "doctype": ".rst", "duration": "", "elaboration": ["req_demo_00001"], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "usc_demo_00001", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 12, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": ["ftr_demo_00002"], "realization_back": [], "reasoning": "", "refinement": ["usc_demo_00002"], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Use Cases", "sections": ["Use Cases"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Resolve Standard Sphinx References in SVG", "type": "usc", "type_ext": "", "type_name": "Use Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "usc_demo_00002": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Main Flow:**\n\n1. The user builds Sphinx documentation with Sphinx-Needs and SVG diagrams.\n2. The `needs_build_json` configuration is enabled in `conf.py`.\n3. The extension loads the `needs.json` file generated by Sphinx-Needs.\n4. For each SVG, the extension parses its content to find `xlink:href` attributes.\n5. If an `xlink:href` attribute contains a Sphinx-Needs reference pattern (e.g., `:need:`MY_NEED_ID`), the extension attempts to resolve it using the loaded `needs.json` data.\n6. The resolved URI (e.g., `../needs_doc.html#MY_NEED_ID`) replaces the reference pattern.\n7. The modified SVG file is saved, making the link clickable in the generated HTML.\n\n**Alternative Flows:**\n\n* **No `needs.json` found:** The extension proceeds without resolving Sphinx-Needs references, logging a message if `needs_build_json` is enabled.\n\n**Preconditions:**\n\n* Sphinx documentation build is initiated.\n* SVG diagrams are present in the build output's image directory.\n* Sphinx-Needs extension is active and `needs_build_json` is set to `True`.\n* A `needs.json` file is generated and accessible.\n\n**Postconditions:**\n\n* SVG diagrams have clickable links to Sphinx-Needs where references were present.\n* The Sphinx build completes successfully.\n\n**Use Case Diagram:**\n\n.. uml::\n\n   left to right direction\n   actor User\n   boundary \"Sphinx Build\" as Sphinx\n   control \"DiagramConnect\" as DC\n   entity \"SVG File\" as SVG\n   entity \"needs.json\" as NJ\n\n   User --> Sphinx : Build Docs (needs_build_json=True)\n   Sphinx --> DC : Trigger resolve_references\n   DC --> NJ : Load needs.json\n   DC --> SVG : Read SVG files\n   DC --> NJ : Resolve :need:\n   NJ --> DC : Return resolved URI\n   DC --> SVG : Write updated SVG\n   DC --> Sphinx : Build finished\n   Sphinx --> User : Provide HTML Docs", "created_at": "", "docname": "traceability/use_cases", "doctype": ".rst", "duration": "", "elaboration": ["req_demo_00003"], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "usc_demo_00002", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 59, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": ["ftr_demo_00003"], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": ["usc_demo_00001"], "satisfy": [], "satisfy_back": [], "section_name": "Use Cases", "sections": ["Use Cases"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Resolve Sphinx-Needs References in SVG", "type": "usc", "type_ext": "", "type_name": "Use Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": ["tsc_demo_00003"], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}, "usc_demo_00003": {"acceptance": "", "arch": {}, "avatar": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "**Main Flow:**\n\n1. The user sets `sphinx_diagram_connect_verbose = True` in their `conf.py`.\n2. During the Sphinx build, for every successfully resolved `xlink:href` in an SVG, the extension logs an informative message indicating the original and resolved URI.\n\n**Preconditions:**\n\n* The `sphinx_diagram_connect` extension is enabled in `conf.py`.\n\n**Postconditions:**\n\n* Detailed logging messages about reference resolution are displayed during the build.\n\n**Use Case Diagram:**\n\n.. uml::\n\n   left to right direction\n   actor User\n   component \"conf.py\" as Conf\n   control \"DiagramConnect\" as DC\n   artifact \"Build Log\" as Log\n\n   User --> Conf : Set verbose = True\n   Conf --> DC : Configure verbose\n   DC --> Log : Log resolved hrefs", "created_at": "", "docname": "traceability/use_cases", "doctype": ".rst", "duration": "", "elaboration": ["req_demo_00010"], "elaboration_back": [], "external_css": "external_link", "external_url": null, "has_dead_links": false, "has_forbidden_dead_links": false, "id": "usc_demo_00003", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 112, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "realization": ["ftr_demo_00004"], "realization_back": [], "reasoning": "", "refinement": [], "refinement_back": [], "satisfy": [], "satisfy_back": [], "section_name": "Use Cases", "sections": ["Use Cases"], "service": "", "signature": "", "specific": "", "specify": [], "specify_back": [], "status": "open", "style": null, "tags": [], "template": null, "test": "", "title": "Configure Verbose Output", "type": "usc", "type_ext": "", "type_name": "Use Case", "updated_at": "", "url": "", "url_postfix": "", "user": "", "validation": [], "validation_back": [], "verify": [], "verify_back": [], "verify_req": [], "verify_req_back": [], "verify_spc": [], "verify_spc_back": []}}, "needs_amount": 27, "needs_schema": {"$schema": "http://json-schema.org/draft-07/schema#", "properties": {"acceptance": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "arch": {"additionalProperties": {"type": "string"}, "default": {}, "description": "Mapping of uml key to uml content.", "field_type": "core", "type": "object"}, "avatar": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "closed_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "completion": {"default": "", "description": "Added for needgantt functionality", "field_type": "extra", "type": "string"}, "constraints": {"default": [], "description": "List of constraint names, which are defined for this need.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "constraints_error": {"default": "", "description": "An error message set if any constraint failed, and `error_message` field is set in config.", "field_type": "core", "type": "string"}, "constraints_passed": {"default": true, "description": "True if all constraints passed, False if any failed, None if not yet checked.", "field_type": "core", "type": "boolean"}, "constraints_results": {"additionalProperties": {"type": "object"}, "default": {}, "description": "Mapping of constraint name, to check name, to result.", "field_type": "core", "type": "object"}, "content": {"default": "", "description": "Content of the need.", "field_type": "core", "type": "string"}, "created_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "docname": {"default": null, "description": "Name of the document where the need is defined (None if external).", "field_type": "core", "type": ["string", "null"]}, "doctype": {"default": ".rst", "description": "Type of the document where the need is defined, e.g. '.rst'.", "field_type": "core", "type": "string"}, "duration": {"default": "", "description": "Added for needgantt functionality", "field_type": "extra", "type": "string"}, "elaboration": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "elaboration_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "external_css": {"default": "", "description": "CSS class name, added to the external reference.", "field_type": "core", "type": "string"}, "external_url": {"default": null, "description": "URL of the need, if it is an external need.", "field_type": "core", "type": ["string", "null"]}, "has_dead_links": {"default": false, "description": "True if any links reference need ids that are not found in the need list.", "field_type": "core", "type": "boolean"}, "has_forbidden_dead_links": {"default": false, "description": "True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.", "field_type": "core", "type": "boolean"}, "id": {"description": "ID of the data.", "field_type": "core", "type": "string"}, "id_prefix": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "is_external": {"default": false, "description": "If true, no node is created and need is referencing external url.", "field_type": "core", "type": "boolean"}, "is_modified": {"default": false, "description": "Whether the need was modified by needextend.", "field_type": "core", "type": "boolean"}, "is_need": {"default": true, "description": "Whether the need is a need.", "field_type": "core", "type": "boolean"}, "is_part": {"default": false, "description": "Whether the need is a part.", "field_type": "core", "type": "boolean"}, "jinja_content": {"default": false, "description": "Whether the content should be pre-processed by jinja.", "field_type": "core", "type": "boolean"}, "layout": {"default": null, "description": "Key of the layout, which is used to render the need.", "field_type": "core", "type": ["string", "null"]}, "lineno": {"default": null, "description": "Line number where the need is defined (None if external).", "field_type": "core", "type": ["integer", "null"]}, "links": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "links_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "max_amount": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "max_content_lines": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "modifications": {"default": 0, "description": "Number of modifications by needextend.", "field_type": "core", "type": "integer"}, "params": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "parent_need": {"default": "", "description": "Simply the first parent id.", "field_type": "core", "type": "string"}, "parent_needs": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "parent_needs_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "parts": {"additionalProperties": {"type": "object"}, "default": {}, "description": "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data", "field_type": "core", "type": "object"}, "post_content": {"default": "", "description": "Post-content of the need.", "field_type": "core", "type": "string"}, "post_template": {"default": null, "description": "Post-template of the need.", "field_type": "core", "type": ["string", "null"]}, "pre_content": {"default": "", "description": "Pre-content of the need.", "field_type": "core", "type": "string"}, "pre_template": {"default": null, "description": "Pre-template of the need.", "field_type": "core", "type": ["string", "null"]}, "prefix": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "query": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "realization": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "realization_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "reasoning": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "refinement": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "refinement_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "satisfy": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "satisfy_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "section_name": {"default": "", "description": "Simply the first section.", "field_type": "core", "type": "string"}, "sections": {"default": [], "description": "Sections of the need.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "service": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "signature": {"default": "", "description": "Derived from a docutils desc_name node.", "field_type": "core", "type": "string"}, "specific": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "specify": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "specify_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "status": {"default": null, "description": "Status of the need.", "field_type": "core", "type": ["string", "null"]}, "style": {"default": null, "description": "Comma-separated list of CSS classes (all appended by `needs_style_`).", "field_type": "core", "type": ["string", "null"]}, "tags": {"default": [], "description": "List of tags.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "template": {"default": null, "description": "Template of the need.", "field_type": "core", "type": ["string", "null"]}, "test": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "title": {"description": "Title of the need.", "field_type": "core", "type": "string"}, "type": {"default": "", "description": "Type of the need.", "field_type": "core", "type": "string"}, "type_ext": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "type_name": {"default": "", "description": "Name of the type.", "field_type": "core", "type": "string"}, "updated_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "url": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "url_postfix": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "user": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "validation": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "validation_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "verify": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "verify_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "verify_req": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "verify_req_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "verify_spc": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "verify_spc_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}}}